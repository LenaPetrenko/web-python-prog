# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску, как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24,
вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28  в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
ip = (input('ввесди IP-сети в формате: 10.1.1.0/24 '))
network = ip[:ip.find('/')] 
bin_network = network.split('.')

pr_mask= ip[ip.find('/')::] 
mask = ip[ip.find('/')+1::] 
bin_mask = int(mask)
bin_mask = '1' * bin_mask
bin_mask = "{:<032}".format(bin_mask)

bi1 = int(bin_network[0])
bi2 = int(bin_network[1])
bi3 = int(bin_network[2])
bi4 = int(bin_network[3])

bm1=int(bin_mask[0:8], 2)
bm2=int(bin_mask[8:16], 2)
bm3=int(bin_mask[16:24], 2)
bm4=int(bin_mask[24:32], 2)

bi1 = bi1 & bm1
bi2 = bi2 & bm2
bi3 = bi3 & bm3
bi4 = bi4 & bm4

print_network = '''
 Network:
 {0:<8} {1:<8} {2:<8} {3:<8}
 {0:<08b} {1:<08b} {2:<08b} {3:<08b}
 '''
print_mask = '''
 Mask:
 {4:<}
 {0:<10} {1:<10} {2:<10} {3:<10}
 {0:<10b} {1:<10b} {2:<10b} {3:<10b}
 ''' 
print(bm4)
print(print_network.format(bi1, bi2, bi3, bi4))
print(print_mask.format(bm1, bm2, bm3, bm4, pr_mask))
